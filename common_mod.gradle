apply plugin: 'java'
apply plugin: 'idea'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)
java.withSourcesJar()
java.withJavadocJar()

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
        ])
    }
}

repositories {

    mavenCentral()

    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

    maven {
        name = 'BlameJared Maven (CrT / Bookshelf)'
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = "JEI"
        url "https://dvs1.progwml6.com/files/maven"
        content {
            includeGroup("mezz.jei")
        }
    }
    maven {
        name = "REI"
        url "https://maven.shedaniel.me"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

def zenCodeDeps = [':CodeFormatter', ':CodeFormatterShared', ':JavaIntegration', ':JavaAnnotations', ':JavaBytecodeCompiler', ':JavaShared', ':Validator', ':Parser', ':CodeModel', ':Shared']
def zenCodeTestDeps = [':ScriptingExample']

configurations {
    library
    implementation.extendsFrom library
}

dependencies {
    implementation project(":Crafttweaker_Annotations")
    annotationProcessor project(":Crafttweaker_Annotation_Processors")

    zenCodeDeps.collect { library project(it) }

    testImplementation group: "org.junit.jupiter", name: "junit-jupiter", version: "5.6.2"
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter", version: "5.6.2"

//    zenCodeTestDeps.collect { testImplementation(project(it).sourceSets.test.output) }
//    testCompile group: "org.assertj", name: "assertj-core", version: "3.19.0"

}

tasks.withType(JavaCompile).configureEach {

    it.options.encoding = 'UTF-8'
    it.options.release = 16
    it.options.compilerArgs << "-Acrafttweaker.processor.document.output_directory=${file('docsOut')}"
}

processResources {
    dependsOn(":StdLibs:zipItUp")
    from files(evaluationDependsOn(":StdLibs").tasks.getByName("zipItUp").outputs)
}

idea {
    module {
        excludeDirs += [project.file("run"), project.file("run_server")]
    }
}